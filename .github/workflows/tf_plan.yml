name: TF PLAN
#run-name: ${{ github.actor }} is running a TF plan

on:
  pull_request:
    branches:
       - main
      
    paths:
      - 'infra/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:

  plan-prod:
    name: 'terraform plan PROD'
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: 'infra'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: 1 - Checkout
        uses: actions/checkout@v2

      - name: 2 - Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 0.15.5

      - name: 3 -Terraform fmt
        id: fmt
        run: terraform fmt
             
      - name: 4 - Terraform init
        id: init
        run: terraform init -reconfigure -backend=true -backend-config="config/prod/backend.hcl"

      - name: 5 - Terraform validate
        id: validate
        run: terraform validate -no-color
      
      - name: 6 - Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -var-file="config/prod/terraform.tfvars"


      # github integration with PR
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plandev.outputs.stdout }}"
        with:

          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
            })

  plan-dev:
    name: 'terraform plan DEV'
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: 'infra'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: 1 - Checkout
        uses: actions/checkout@v2

      - name: 2 - Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 0.15.5

      - name: 3 -Terraform fmt
        id: fmt
        run: terraform fmt
             
      - name: 4 - Terraform init
        id: init
        run: terraform init -reconfigure -backend=true -backend-config="config/dev/backend.hcl"

      - name: 5 - Terraform validate
        id: validate
        run: terraform validate -no-color
      
      - name: 6 - Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -var-file="config/dev/terraform.tfvars"


      # github integration with PR
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plandev.outputs.stdout }}"
        with:

          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
            })